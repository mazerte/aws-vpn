#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :script.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
aws_vpn_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn - Create and manage VPN connect inside your AWS VPC\n"
    echo

  else
    printf "aws-vpn - Create and manage VPN connect inside your AWS VPC\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn [command]\n"
  printf "  aws-vpn [command] --help | -h\n"
  printf "  aws-vpn --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  list         List all the connections."
  echo "  status       Status id all the connections."
  echo "  upgrade      Upgrade AWS VPN template files."
  echo "  create       Create a new VPN endpoint."
  echo "  update       Update a new VPN endpoint"
  echo "  info         Describe the connection"
  echo "  connect      Connect to the VPN"
  echo "  disconnect   Disconnect from the VPN"
  echo "  delete       Delete a connect"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  aws-vpn create <name> <vpc_id> <subnet_ids>\n"
    printf "  aws-vpn connect <name>\n"
    printf "  aws-vpn disconnect <name>\n"
    printf "  aws-vpn delete <name>\n"
    echo

  fi
}

# :command.usage
aws_vpn_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn list - List all the connections.\n"
    echo

  else
    printf "aws-vpn list - List all the connections.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn list\n"
  printf "  aws-vpn list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
aws_vpn_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn status - Status id all the connections.\n"
    echo

  else
    printf "aws-vpn status - Status id all the connections.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn status\n"
  printf "  aws-vpn status --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
aws_vpn_upgrade_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn upgrade - Upgrade AWS VPN template files.\n"
    echo

  else
    printf "aws-vpn upgrade - Upgrade AWS VPN template files.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn upgrade\n"
  printf "  aws-vpn upgrade --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
aws_vpn_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn create - Create a new VPN endpoint.\n"
    echo

  else
    printf "aws-vpn create - Create a new VPN endpoint.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn create NAME [options]\n"
  printf "  aws-vpn create --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --vpc-id VPC_ID (required)"
    printf "    ID of your VPC.\n"
    echo

    # :flag.usage
    echo "  --subnet-ids SUBNET_IDS (required)"
    printf "    List of subnet ids (separated by comma).\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  NAME"
    printf "    Connection name.\n"
    echo

  fi
}

# :command.usage
aws_vpn_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn update - Update a new VPN endpoint\n"
    echo

  else
    printf "aws-vpn update - Update a new VPN endpoint\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn update NAME\n"
  printf "  aws-vpn update --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  NAME"
    printf "    Connection name.\n"
    echo

  fi
}

# :command.usage
aws_vpn_info_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn info - Describe the connection\n"
    echo

  else
    printf "aws-vpn info - Describe the connection\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn info NAME\n"
  printf "  aws-vpn info --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  NAME"
    printf "    Connection name.\n"
    echo

  fi
}

# :command.usage
aws_vpn_connect_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn connect - Connect to the VPN\n"
    echo

  else
    printf "aws-vpn connect - Connect to the VPN\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn connect NAME\n"
  printf "  aws-vpn connect --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  NAME"
    printf "    Connection name.\n"
    echo

  fi
}

# :command.usage
aws_vpn_disconnect_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn disconnect - Disconnect from the VPN\n"
    echo

  else
    printf "aws-vpn disconnect - Disconnect from the VPN\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn disconnect NAME\n"
  printf "  aws-vpn disconnect --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  NAME"
    printf "    Connection name.\n"
    echo

  fi
}

# :command.usage
aws_vpn_delete_usage() {
  if [[ -n $long_usage ]]; then
    printf "aws-vpn delete - Delete a connect\n"
    echo

  else
    printf "aws-vpn delete - Delete a connect\n"
    echo

  fi

  printf "Usage:\n"
  printf "  aws-vpn delete NAME\n"
  printf "  aws-vpn delete --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  NAME"
    printf "    Connection name.\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# :src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions
# :command.function
aws_vpn_list_command() {
  # :src/list_command.sh
  tunnelblickctl list \
    | grep --color=never "aws.vpn" \
    | sed s/\.aws\.vpn//g
}

# :command.function
aws_vpn_status_command() {
  # :src/status_command.sh
  tunnelblickctl status \
    | grep --color=never "NAME\|aws.vpn" \
    | sed "s/\.aws\.vpn/        /g" \
    | sed "s,CONNECTED,$(tput setaf 2)CONNECTED$(tput sgr0),"
}

# :command.function
aws_vpn_upgrade_command() {
  # :src/upgrade_command.sh
  _init_folders &&  echo "$(green_bold "AWS VPN upgraded")"
}

# :command.function
aws_vpn_create_command() {
  # :src/create_command.sh
  NAME="${args[name]}"
  VPC_ID="${args[--vpc-id]}"
  SUBNET_IDS="${args[--subnet-ids]}"

  CONFIG_FILE="$AWS_VPN_DIR/config/$NAME.properties"
  echo "NAME=$NAME" > $CONFIG_FILE
  echo "VPC_ID=$VPC_ID" >> $CONFIG_FILE
  echo "SUBNET_IDS=$SUBNET_IDS" >> $CONFIG_FILE

  echo ""
  echo "$(green_bold "Create certificat")"
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "$AWS_VPN_DIR/certs/$NAME.key" -out "$AWS_VPN_DIR/certs/$NAME.crt" -subj "/CN=$NAME.aws.vpn/O=$NAME.aws.vpn"

  echo ""
  echo "$(green_bold "Import certificat in ACM")"
  _AWS_ACM_CERTIFICAT_ARN=`aws acm import-certificate --certificate "fileb://$AWS_VPN_DIR/certs/$NAME.crt" --private-key "fileb://$AWS_VPN_DIR/certs/$NAME.key" | jq -r ".CertificateArn"`
  echo "ACM_CERTIFICAT_ARN=$_AWS_ACM_CERTIFICAT_ARN" >> $CONFIG_FILE
  echo "$_AWS_ACM_CERTIFICAT_ARN"

  echo ""
  echo "$(green_bold "Create CloudFormation stack")"
  aws cloudformation create-stack --stack-name $NAME-aws-vpn --template-body file://$AWS_VPN_DIR/vpn.cfn.yml --parameters ParameterKey=VpcId,ParameterValue=$VPC_ID ParameterKey=SubnetIds,ParameterValue=$SUBNET_IDS ParameterKey=CertificationArn,ParameterValue=$_AWS_ACM_CERTIFICAT_ARN > /dev/null
  echo "Waiting... (it will take few minutes)"
  aws cloudformation wait stack-create-complete --stack-name $NAME-aws-vpn

  echo ""
  echo "$(green_bold "Configure tunnelblick")"
  UNIQ=`echo $RANDOM | md5sum | head -c 12; echo;`
  ENDPOINT=`aws cloudformation describe-stacks --stack-name $NAME-aws-vpn | jq -r ".Stacks[0].Outputs[] | select(.OutputKey==\"VpnEndpointUrl\") | .OutputValue"`
  CERTIFICAT=`cat $AWS_VPN_DIR/certs/$NAME.crt`
  KEY=`cat $AWS_VPN_DIR/certs/$NAME.key`
  TEMPLATE=`cat $AWS_VPN_DIR/config.tpl.ovpn`
  eval "echo \"$TEMPLATE\"" > $AWS_VPN_DIR/ovpns/$NAME.aws.vpn.ovpn
  echo "You will need to enter your password"
  tunnelblickctl install $AWS_VPN_DIR/ovpns/$NAME.aws.vpn.ovpn > /dev/null 2>/dev/null | true
}

# :command.function
aws_vpn_update_command() {
  # :src/update_command.sh
  NAME="${args[name]}"
  CONFIG_FILE="$AWS_VPN_DIR/config/$NAME.properties"

  . $CONFIG_FILE

  echo ""
  echo "$(green_bold "Update CloudFormation stack")"
  aws cloudformation update-stack --stack-name $NAME-aws-vpn --template-body file://$AWS_VPN_DIR/vpn.cfn.yml --parameters ParameterKey=VpcId,ParameterValue=$VPC_ID ParameterKey=SubnetIds,ParameterValue=$SUBNET_IDS ParameterKey=CertificationArn,ParameterValue=$ACM_CERTIFICAT_ARN > /dev/null 2>/dev/null | true
  aws cloudformation wait stack-update-complete --stack-name $NAME-aws-vpn

  echo ""
  echo "$(green_bold "Configure tunnelblick")"
  UNIQ=`echo $RANDOM | md5sum | head -c 12; echo;`
  ENDPOINT=`aws cloudformation describe-stacks --stack-name $NAME-aws-vpn | jq -r ".Stacks[0].Outputs[] | select(.OutputKey==\"VpnEndpointUrl\") | .OutputValue"`
  CERTIFICAT=`cat $AWS_VPN_DIR/certs/$NAME.crt`
  KEY=`cat $AWS_VPN_DIR/certs/$NAME.key`
  TEMPLATE=`cat $AWS_VPN_DIR/config.tpl.ovpn`
  eval "echo \"$TEMPLATE\"" > $AWS_VPN_DIR/ovpns/$NAME.aws.vpn.ovpn
  echo "You will need to enter your password"
  tunnelblickctl install $AWS_VPN_DIR/ovpns/$NAME.aws.vpn.ovpn > /dev/null 2>/dev/null | true
}

# :command.function
aws_vpn_info_command() {
  # :src/info_command.sh
  NAME="${args[name]}"
  CONFIG_FILE="$AWS_VPN_DIR/config/$NAME.properties"

  . $CONFIG_FILE

  STATUS_LINE=`tunnelblickctl status | grep --color=never "$NAME.aws.vpn"`
  if [[ "$STATUS_LINE" =~ ^.*\.aws\.vpn[[:space:]]*([A-Z]*) ]]; then
    STATUS="${BASH_REMATCH[1]}"
  fi

  echo "                     $(bold "Name:") $NAME"
  echo "                   $(bold "Status:") $STATUS"
  echo "                   $(bold "VPC Id:") $VPC_ID"
  echo "               $(bold "Subnet Ids:") $SUBNET_IDS"
  echo "   $(bold "Tunnelblick connection:") $NAME.aws.vpn"
  echo "       $(bold "ACM Certificat ARN:") $ACM_CERTIFICAT_ARN"
  echo "               $(bold "Certificat:") $AWS_VPN_DIR/certs/$NAME.crt"
  echo "              $(bold "Private key:") $AWS_VPN_DIR/certs/$NAME.key"
  echo "      $(bold "OpenVPN config file:") $AWS_VPN_DIR/ovpns/$NAME.aws.vpn.ovpn"
  echo "$(bold "CloudFormation stack name:") $NAME-aws-vpn"
}

# :command.function
aws_vpn_connect_command() {
  # :src/connect_command.sh
  connection=${args[name]}

  tunnelblickctl connect "$connection.aws.vpn"
}

# :command.function
aws_vpn_disconnect_command() {
  # :src/disconnect_command.sh
  connection=${args[name]}

  tunnelblickctl disconnect "$connection.aws.vpn"
}

# :command.function
aws_vpn_delete_command() {
  # :src/delete_command.sh
  NAME="${args[name]}"
  CONFIG_FILE="$AWS_VPN_DIR/config/$NAME.properties"

  . $CONFIG_FILE

  tunnelblickctl disconnect "$NAME.aws.vpn"

  echo ""
  echo "$(green_bold "Delete CloudFormation stack")"
  aws cloudformation delete-stack --stack-name $NAME-aws-vpn
  echo "Waiting... (it will take few minutes)"
  aws cloudformation wait stack-delete-complete --stack-name $NAME-aws-vpn

  echo ""
  echo "$(green_bold "Delete certificat in ACM")"
  aws acm delete-certificate --certificate-arn $ACM_CERTIFICAT_ARN

  echo ""
  echo "$(green_bold "Delete configuration")"
  rm $AWS_VPN_DIR/certs/$NAME.crt
  rm $AWS_VPN_DIR/certs/$NAME.key
  rm $AWS_VPN_DIR/config/$NAME.properties
  rm $AWS_VPN_DIR/ovpns/$NAME.aws.vpn.ovpn

  echo ""
  echo "$(green_bold "Delete Tunnelblick configuration")"
  rm -rf $HOME/Library/Application\ Support/Tunnelblick/Configurations/$NAME.aws.vpn.tblk
  tunnelblickctl quit
  sleep 5
  tunnelblickctl launch
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  list )
    action="list"
    shift
    aws_vpn_list_parse_requirements "$@"
    shift $#
    ;;

  status )
    action="status"
    shift
    aws_vpn_status_parse_requirements "$@"
    shift $#
    ;;

  upgrade )
    action="upgrade"
    shift
    aws_vpn_upgrade_parse_requirements "$@"
    shift $#
    ;;

  create )
    action="create"
    shift
    aws_vpn_create_parse_requirements "$@"
    shift $#
    ;;

  update )
    action="update"
    shift
    aws_vpn_update_parse_requirements "$@"
    shift $#
    ;;

  info )
    action="info"
    shift
    aws_vpn_info_parse_requirements "$@"
    shift $#
    ;;

  connect )
    action="connect"
    shift
    aws_vpn_connect_parse_requirements "$@"
    shift $#
    ;;

  disconnect )
    action="disconnect"
    shift
    aws_vpn_disconnect_parse_requirements "$@"
    shift $#
    ;;

  delete )
    action="delete"
    shift
    aws_vpn_delete_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    aws_vpn_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_list_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_list_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="list"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_status_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_status_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="status"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_upgrade_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_upgrade_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="upgrade"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_create_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_create_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="create"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --vpc-id )
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--vpc-id]="$2"
        shift
        shift
      else
        printf "%s\n" "--vpc-id requires an argument: --vpc-id VPC_ID"
        exit 1
      fi
      ;;

    # :flag.case
    --subnet-ids )
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--subnet-ids]="$2"
        shift
        shift
      else
        printf "%s\n" "--subnet-ids requires an argument: --subnet-ids SUBNET_IDS"
        exit 1
      fi
      ;;

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[name]+x} ]]; then
        # :argument.validations
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[name]+x} ]]; then
    printf "missing required argument: NAME\nusage: aws-vpn create NAME [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  if [[ -z ${args[--vpc-id]+x} ]]; then
    printf "missing required flag: --vpc-id VPC_ID\n"
    exit 1
  fi
  if [[ -z ${args[--subnet-ids]+x} ]]; then
    printf "missing required flag: --subnet-ids SUBNET_IDS\n"
    exit 1
  fi
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_update_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_update_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="update"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[name]+x} ]]; then
        # :argument.validations
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[name]+x} ]]; then
    printf "missing required argument: NAME\nusage: aws-vpn update NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_info_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_info_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="info"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[name]+x} ]]; then
        # :argument.validations
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[name]+x} ]]; then
    printf "missing required argument: NAME\nusage: aws-vpn info NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_connect_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_connect_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="connect"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[name]+x} ]]; then
        # :argument.validations
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[name]+x} ]]; then
    printf "missing required argument: NAME\nusage: aws-vpn connect NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_disconnect_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_disconnect_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="disconnect"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[name]+x} ]]; then
        # :argument.validations
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[name]+x} ]]; then
    printf "missing required argument: NAME\nusage: aws-vpn disconnect NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
aws_vpn_delete_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    aws_vpn_delete_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="delete"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[name]+x} ]]; then
        # :argument.validations
        args[name]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[name]+x} ]]; then
    printf "missing required argument: NAME\nusage: aws-vpn delete NAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :src/initialize.sh
  AWS_VPN_DIR=$HOME/.aws-vpn

  function _init_folders() {
    mkdir -pv "$AWS_VPN_DIR"
    mkdir -pv "$AWS_VPN_DIR/certs"
    mkdir -pv "$AWS_VPN_DIR/ovpns"
    mkdir -pv "$AWS_VPN_DIR/config"

    if [ "$AWS_VPN_DEV" == 1 ]; then
      echo "INFO: development mode activated"
      cp vpn.cfn.yml $AWS_VPN_DIR/vpn.cfn.yml
      cp config.tpl.ovpn $AWS_VPN_DIR/config.tpl.ovpn
    else
      REPO_URL="https://raw.githubusercontent.com/mazerte/aws-vpn/main/"
      curl -s "$REPO_URL/vpn.cfn.yml" > $AWS_VPN_DIR/vpn.cfn.yml
      curl -s "$REPO_URL/config.tpl.ovpn" > $AWS_VPN_DIR/config.tpl.ovpn
    fi
  }

  # Init dot folders
  if ! [[ -d $AWS_VPN_DIR ]]; then
    _init_folders
  fi

  # Check tunnelblickctl dependency
  if ! command -v tunnelblickctl &> /dev/null; then
    echo ""
    echo "$(red_bold "You must install first \"tunnelblickctl\"!")"
    echo "$(red "You can run these commands:")"
    echo "$(red " $ brew tap benwebber/tunnelblickctl")"
    echo "$(red " $ brew install tunnelblickctl")"
    echo ""
    echo "$(red "More information at https://github.com/benwebber/tunnelblickctl")"
    exit 1
  fi

  # Check aws dependency
  if ! command -v aws &> /dev/null; then
    echo ""
    echo "$(red_bold "You must install first \"awscli\"!")"
    echo "$(red "You can run this command:")"
    echo "$(red " $ brew install awscli")"
    echo ""
    echo "$(red "More information at https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html")"
    exit 1
  fi

  # Check if tunnelblick is running
  if ! tunnelblickctl list > /dev/null 2>/dev/null; then
    echo "Start tunnelblick ..."
    tunnelblickctl launch
    echo ""
  fi
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "list" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_list_usage
    else
      aws_vpn_list_command
    fi

  elif [[ $action == "status" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_status_usage
    else
      aws_vpn_status_command
    fi

  elif [[ $action == "upgrade" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_upgrade_usage
    else
      aws_vpn_upgrade_command
    fi

  elif [[ $action == "create" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_create_usage
    else
      aws_vpn_create_command
    fi

  elif [[ $action == "update" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_update_usage
    else
      aws_vpn_update_command
    fi

  elif [[ $action == "info" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_info_usage
    else
      aws_vpn_info_command
    fi

  elif [[ $action == "connect" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_connect_usage
    else
      aws_vpn_connect_command
    fi

  elif [[ $action == "disconnect" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_disconnect_usage
    else
      aws_vpn_disconnect_command
    fi

  elif [[ $action == "delete" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      aws_vpn_delete_usage
    else
      aws_vpn_delete_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
